// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/09/Square/SquareGame.jack

/**
 * Implements the Square Dance game.
 * This simple game allows the user to move a black square around
 * the screen, and change the square's size during the movement.
 * When the game starts, a square of 30 by 30 pixels is shown at the
 * top-left corner of the screen. The user controls the square as follows.
 * The 4 arrow keys are used to move the square up, down, left, and right.
 * The 'z' and 'x' keys are used, respectively, to decrement and increment
 * the square's size. The 'q' key is used to quit the game.
 */

class BattleSquare {
   field Square square1; // the square of this game
   field int direction1; // the square's current direction: 
   field Square square2; // the square of this game
   field int direction2; // the square's current direction: 
   field Square ball;
   field int BallXPosition;
   field int BallYPosition;
   field Random random;
   field int Score1;
   field int Score2;
                        

   /** Constructs a new Square Game. */
   constructor BattleSquare new() {
      // Creates a 30 by 30 pixels square and positions it at the top-left
      // of the screen.
      let square1 = Square.new(0, 0, 12);
      let direction1 = 0;  // initial state is no movement
      let square2 = Square.new(500, 0, 12);
      let direction2 = 0;  // initial state is no movement

      let Score1 = 0;
      let Score2 = 0;
      
      let random = Random.new(13);
      do drawTheBall();
      return this;
   }

   method void drawTheBall(){
      let BallXPosition = random.randRange(500);
      let BallYPosition = random.randRange(240);
      do Square.new(BallXPosition, BallYPosition, 8);
      return;
   }

   /** Disposes this game. */
   method void dispose() {
      do square1.dispose();
      do square2.dispose();
      do Memory.deAlloc(this);
      return;
   }

   /** Moves the square1 in the current direction1. */
   method void moveSquare1() {
      if (direction1 = 1) { do square1.moveUp(); }
      if (direction1 = 2) { do square1.moveDown(); }
      if (direction1 = 3) { do square1.moveLeft(); }
      if (direction1 = 4) { do square1.moveRight(); }

      // if (BallXPosition = square1.getX()) {
      //    do Output.printString("colisão X");
      // }

      // if (BallYPosition = square1.getY()) {
      //    do Output.printString("colisão Y");
      // }


      // BallXPosition =  a1
      // BallXPosition =  b1
      // BallYPosition + size = a2  
      // BallYPosition + size = b2 

      // square1.getX()= x1
      // square1.getY()= y1
      // square1.getX() + size = x2
      // square1.getY() + size = y2

      if ((BallXPosition = square1.getX()) & (BallYPosition = square1.getY())) {
         do Output.printString("colisão");
      }


      do Sys.wait(5);  // delays the next movement }
      return;
   }

      /** Moves the square2 in the current direction2. */
   method void moveSquare2() {
      if (direction2 = 1) { do square2.moveUp(); }
      if (direction2 = 2) { do square2.moveDown(); }
      if (direction2 = 3) { do square2.moveLeft(); }
      if (direction2 = 4) { do square2.moveRight(); }
      return;
   }

   /** Runs the game: handles the user's inputs and moves the square accordingly */
   method void run() {
      var char key;  // the key currently pressed by the user
      var boolean exit;
      let exit = false;
      
      while (~exit) {
         // waits for a key to be pressed
         while (key = 0) {
            let key = Keyboard.keyPressed();
            do moveSquare1();
            do moveSquare2();
         }
         if (key = 81)  { let exit = true; }     // q key
         // if (key = 90)  { do square1.decSize(); } // z key
         // if (key = 88)  { do square1.incSize(); } // x key
         if (key = 131) { let direction2 = 1; }   // up arrow
         if (key = 133) { let direction2 = 2; }   // down arrow
         if (key = 130) { let direction2 = 3; }   // left arrow
         if (key = 132) { let direction2 = 4; }   // right arrow

         if (key = 87)  { let direction1 = 1; }   // w
         if (key = 83)  { let direction1 = 2; }   // s
         if (key = 65)  { let direction1 = 3; }   // a
         if (key = 68)  { let direction1 = 4; }   // d

         // waits for the key to be released
         while (~(key = 0)) {
            let key = Keyboard.keyPressed();
            do moveSquare1();
            do moveSquare2();
         }
     } // while
     return;
   }
}



