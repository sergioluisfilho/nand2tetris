class BattleSquare {
   field Square square1; // the square of this game
   field int direction1; // the square's current direction: 
   field Square square2; // the square of this game
   field int direction2; // the square's current direction: 
   field Square ball;
   field int BallXPosition;
   field int BallYPosition;
   field Random random;
   field int score1;
   field int score2;
   field int ballSize;
   field boolean exit;
                        

   /** Constructs a new Square Game. */
   constructor BattleSquare new() {
      // Creates a 30 by 30 pixels square and positions it at the top-left
      // of the screen.
      let square1 = Square.new(0, 0, 10);
      let direction1 = 0;  // initial state is no movement
      let square2 = Square.new(500, 0, 10);
      let direction2 = 0;  // initial state is no movement

      let score1 = 0;
      let score2 = 0;

      do showScore();
      
      let random = Random.new(13);
      do drawTheBall();
      return this;
   }

   method void drawTheBall(){
      let BallXPosition = random.randRange(500) + 2;
      let BallYPosition = random.randRange(240) + 2;
      let ballSize = 2;
      do Square.new(BallXPosition, BallYPosition, ballSize);
      return;
   }

   method void eraseTheBall() {
      do Screen.setColor(false);
      do Square.new(BallXPosition, BallYPosition, ballSize);
      return;
   }

   /** Disposes this game. */
   method void dispose() {
      do square1.dispose();
      do square2.dispose();
      do Memory.deAlloc(this);
      return;
   }

   method boolean colision(){
      var int a1;
      var int b1;
      var int a2; 
      var int b2; 
      var int x1; 
      var int y1; 
      var int x2;
      var int y2;

      let a1 = BallXPosition;  
      let b1 = BallYPosition;
      let a2 = BallXPosition + ballSize; 
      let b2 = BallYPosition + ballSize;   

      let x1 = square1.getX();
      let y1 = square1.getY();
      let x2 = square1.getX() + square1.getSize();  
      let y2 = square1.getY() + square1.getSize(); 

      //bola dentro do player na horizontal e bola dentro do player na vertical
      if ( ((x1 < a1) & (a1 < x2)) & ((y1 < b1) & (b1 < y2)) ) {
         return true;
      }

      return false;
   }

   method boolean colision2(){
      var int a1;
      var int b1;
      var int a2; 
      var int b2; 
      var int x1; 
      var int y1; 
      var int x2;
      var int y2;

      let a1 = BallXPosition;  
      let b1 = BallYPosition;
      let a2 = BallXPosition + ballSize; 
      let b2 = BallYPosition + ballSize;   

      let x1 = square2.getX();
      let y1 = square2.getY();
      let x2 = square2.getX() + square2.getSize();  
      let y2 = square2.getY() + square2.getSize(); 

      //bola dentro do player na horizontal e bola dentro do player na vertical
      if ( ((x1 < a1) & (a1 < x2)) & ((y1 < b1) & (b1 < y2)) ) {
         return true;
      }

      return false;
   }

   method void score (int player) {
      // do Output.printString("colisão");
      do eraseTheBall();
      if (player = 1) { let score1 = score1 + 1; }
      if (player = 2) { let score2 = score2 + 1; }

      if (score1 = 7) { 
         do gameOver(1);
      }
      if (score2 = 7) { 
         do gameOver(2);
      }
      do showScore();
      do drawTheBall();
      // TODO: atualizar o placar []
      // TODO: redesenhar a bola em outro lugar []
      // TODO: pensar e implementar a finalização do jogo
      return;   
   }

   method void moveSquare1() {
      if (direction1 = 1) { do square1.moveUp(); }
      if (direction1 = 2) { do square1.moveDown(); }
      if (direction1 = 3) { do square1.moveLeft(); }
      if (direction1 = 4) { do square1.moveRight(); }
      if (colision()) {
         do score(1);
      }
      do Sys.wait(6);  
      return;
   }


   method void moveSquare2() {
      if (direction2 = 1) { do square2.moveUp(); }
      if (direction2 = 2) { do square2.moveDown(); }
      if (direction2 = 3) { do square2.moveLeft(); }
      if (direction2 = 4) { do square2.moveRight(); }
      if (colision2()) {
      do score(2);
      }
      do Sys.wait(6);
      return;
   }

   /** Runs the game: handles the user's inputs and moves the square accordingly */
   method void run() {
      var char key;  // the key currently pressed by the user
      let exit = false;
      
      while (~exit) {
         // waits for a key to be pressed
         while (key = 0) {
            let key = Keyboard.keyPressed();
            do moveSquare1();
            do moveSquare2();
         }

         if (key = 131) { let direction2 = 1; }   // up arrow
         if (key = 133) { let direction2 = 2; }   // down arrow
         if (key = 130) { let direction2 = 3; }   // left arrow
         if (key = 132) { let direction2 = 4; }   // right arrow

         if (key = 87)  { let direction1 = 1; }   // w
         if (key = 83)  { let direction1 = 2; }   // s
         if (key = 65)  { let direction1 = 3; }   // a
         if (key = 68)  { let direction1 = 4; }   // d

         // waits for the key to be released
         while (~(key = 0)) {
            let key = Keyboard.keyPressed();
            do moveSquare1();
            do moveSquare2();
         }
     } // while
     return;
   }

   method void gameOver(int player){
      do showScore();
      let exit = true;
      return;
   }

   method void showScore() {
      do eraseScore();
      do Output.printString("Score: ");
      do Output.printInt(score1);
      do Output.printString(" x ");
      do Output.printInt(score2);
      return;
   }

   method void eraseScore(){
      do Output.backSpace();
      do Output.backSpace();
      do Output.backSpace();
      do Output.backSpace();
      do Output.backSpace();
      do Output.backSpace();
      do Output.backSpace();
      do Output.backSpace();
      do Output.backSpace();
      do Output.backSpace();
      do Output.backSpace();
      do Output.backSpace();
      return;
   }
}



